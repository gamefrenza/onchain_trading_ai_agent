From Gemini 2:
Developing a fully functional on-chain AI trading agent with a UI is a complex project. Providing exact prompts for Cursor to generate all the code at once isn't feasible. Instead, I'll break down the project into smaller, manageable parts with example prompts and guidance on how to use Cursor effectively.

**I. Core Functionality - On-Chain Data Acquisition and Analysis:**

*   **Prompt 1 (Data Fetching - Example using web3.py):**

```
Write a Python script using web3.py to connect to the Ethereum blockchain (specify network, e.g., mainnet, Goerli). Fetch recent trading data (e.g., Uniswap v2/v3 swaps, token transfers) for a given token pair (e.g., WETH/USDC). Extract relevant information like timestamp, price, volume, and transaction hash. Store the data in a Pandas DataFrame. Add error handling and logging.
```

*   **Prompt 2 (Quant Analysis - Example using TA-Lib):**

```
Given a Pandas DataFrame with OHLCV (Open, High, Low, Close, Volume) data, calculate technical indicators using TA-Lib:
    *   Moving Averages (e.g., 7-day, 21-day)
    *   Relative Strength Index (RSI)
    *   Moving Average Convergence Divergence (MACD)
    *   Bollinger Bands
Add these indicators as new columns to the DataFrame.
```

*   **Prompt 3 (Pattern Recognition - Example using scikit-learn):**

```
Using the DataFrame with technical indicators, train a simple machine learning model (e.g., Logistic Regression, Support Vector Machine) with scikit-learn to identify potential trading signals (e.g., buy/sell based on indicator combinations). Split the data into training and testing sets. Evaluate the model's performance using appropriate metrics (e.g., accuracy, precision, recall).
```

**II. On-Chain Execution (Requires careful security considerations):**

*   **Prompt 4 (Smart Contract Interaction - Example using web3.py):**

```
Write a Python function using web3.py that interacts with a pre-deployed smart contract (e.g., a simple trading contract). The function should take a trading action (buy/sell), amount, and other necessary parameters as input and execute a transaction on the blockchain. Include gas estimation and handling of transaction receipts. (Important: Emphasize security best practices, such as using secure private key management and avoiding direct storage of private keys in the code.)
```

**III. AI Agent Logic and Integration:**

*   **Prompt 5 (Agent Orchestration):**

```
Create a Python class representing the AI trading agent. This class should:
    *   Periodically fetch on-chain data.
    *   Perform quant analysis and pattern recognition.
    *   Generate trading signals.
    *   Execute trades on-chain based on the signals, with configurable risk management parameters (e.g., stop-loss, take-profit).
    *   Log all actions and decisions.
```

**IV. User Interface (Example using Streamlit):**

*   **Prompt 6 (Basic UI):**

```
Create a simple web UI using Streamlit to:
    *   Display real-time market data and calculated indicators.
    *   Show the agent's recent trading activity and performance metrics.
    *   Include buttons to manually trigger buy/sell orders.
```

**Using Cursor Effectively:**

*   **Iterative Development:** Focus on one part at a time. Use Cursor to generate code for each prompt, then test and refine it.
*   **Context Window:** Be mindful of Cursor's context window. If the code becomes too long, break it down further or use separate files and import them.
*   **Natural Language Instructions:** Be clear and specific in your prompts. Use natural language but provide enough technical detail.
*   **Code Review and Testing:** Always review and test the generated code thoroughly. AI-generated code can contain errors or inefficiencies.
*   **Security Best Practices:** When dealing with on-chain execution and private keys, prioritize security above all else. Never store private keys directly in your code. Use secure key management solutions.

**Key Considerations:**

*   **Smart Contract Development:** You'll likely need to develop custom smart contracts for trading logic, especially if you have complex strategies.
*   **Gas Optimization:** On-chain transactions cost gas. Optimize your smart contracts and agent logic to minimize gas usage.
*   **Security:** This is paramount. Thoroughly audit your code and smart contracts.
*   **Backtesting and Simulation:** Before deploying to mainnet, rigorously backtest your strategies and simulate market conditions.

This detailed breakdown, combined with effective use of Cursor, will give you a much better starting point for developing your on-chain AI trading agent. Remember that this is a highly complex undertaking, and continuous learning and refinement are essential.
